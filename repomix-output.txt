This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-27T23:27:38.998Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
config/
  Caddyfile
  config.json
public/
  file.svg
  globe.svg
  logo.svg
  manifest.json
  next.svg
  vercel.svg
  window.svg
src/
  app/
    (auth)/
      jobs_management/
        page.tsx
      main/
        page.tsx
      proxy_hosts/
        components/
          AddHostDialog.tsx
          AddHostForm.tsx
          DeleteHostDialog.tsx
          ProxyHostsTable.tsx
          ToggleHostDialog.tsx
        page.tsx
        styles.module.css
      ssl_management/
        components/
          SSLCertsTable.tsx
        page.tsx
      layout.tsx
    api/
      auth/
        [...nextauth]/
          route.ts
      hosts/
        [id]/
          route.ts
        route.ts
      ssl/
        route.ts
      system/
        init/
          route.ts
    components/
      ui/
        alert-dialog.tsx
        button.tsx
        card.tsx
        dialog.tsx
        input.tsx
        label.tsx
        spinner.tsx
        toast.tsx
        toaster.tsx
        tooltip.tsx
        use-toast.ts
      Header.tsx
      Logo.svg
      Logo.tsx
      SystemInitializer.tsx
    login/
      components/
        LoginForm.tsx
      page.tsx
    globals.css
    layout.tsx
    page.tsx
    providers.tsx
  lib/
    auth/
      auth-options.ts
    caddy/
      config.ts
      manager.ts
      types.ts
    config/
      watcher.ts
    hooks/
      useApi.ts
      useHosts.ts
      useSSL.ts
    services/
      caddy-service.ts
    utils.ts
  types/
    next-auth.d.ts
  middleware.ts
.dockerignore
.eslintrc.json
.gitignore
docker-compose.yml
docker-entrypoint.sh
Dockerfile
next.config.js
package.json
postcss.config.js
README.md
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: config/Caddyfile
================
{
    admin localhost:2019
    auto_https off
    persist_config off
    log {
        format json
        level INFO
    }
}

# Import all host configurations
import /app/config/hosts/*.conf

================
File: config/config.json
================
{
  "hosts": [],
  "globalSettings": {
    "logLevel": "INFO"
  }
}

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 800 200">
  <defs>
    <linearGradient id="nextGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#000000"/>
      <stop offset="100%" style="stop-color:#333333"/>
    </linearGradient>
  </defs>

  <g transform="translate(20, 10)">
    <g transform="translate(20, 40)">
      <path d="M40,10 A30,30 0 0,1 40,70" 
            stroke="#000000" 
            stroke-width="12" 
            fill="none" 
            stroke-linecap="round"/>
      
      <path d="M35,40 L65,40 L55,30 M65,40 L55,50" 
            stroke="#000000" 
            stroke-width="8" 
            fill="none" 
            stroke-linecap="round" 
            stroke-linejoin="round"/>
    </g>
  </g>
</svg>

================
File: public/manifest.json
================
{
  "name": "Caddy Next Proxy Manager",
  "short_name": "Caddy Next",
  "description": "Simple and efficient proxy management with Caddy",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#ffffff",
  "theme_color": "#000000",
  "icons": [
    {
      "src": "/logo.svg",
      "sizes": "any",
      "type": "image/svg+xml",
      "purpose": "any maskable"
    }
  ]
}

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: src/app/(auth)/jobs_management/page.tsx
================
'use client'

export default function JobsManagementPage() {
  return (
    <div className="p-6 space-y-6">
      <h1 className="text-3xl font-bold tracking-tight">Jobs</h1>
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6">
        <div className="flex items-center justify-between mb-6">
          <div>
            <h2 className="text-lg font-semibold">Scheduled Tasks</h2>
            <p className="text-sm text-gray-500 dark:text-gray-400">Manage your automated tasks and jobs</p>
          </div>
          <button className="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-900">
            Create Job
          </button>
        </div>

        <div className="border border-gray-200 dark:border-gray-700 rounded-lg">
          <div className="flex flex-col items-center justify-center py-12">
            <div className="text-center">
              <p className="mt-2 text-sm text-gray-500 dark:text-gray-400">
                No jobs scheduled
              </p>
              <p className="text-sm text-gray-500 dark:text-gray-400">
                Click the button above to create your first job
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

================
File: src/app/(auth)/main/page.tsx
================
'use client'

import { Globe, Shield, Clock, LineChart } from "lucide-react"
import { Card, CardHeader, CardTitle, CardContent } from "@/app/components/ui/card"

export default function MainPage() {
  return (
    <div className="p-6 space-y-6">
      <h1 className="text-3xl font-bold tracking-tight">Dashboard</h1>
      
      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
        {/* Proxy Hosts Card */}
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0">
            <CardTitle className="text-sm font-medium">Proxy Hosts</CardTitle>
            <Globe className="w-4 h-4 text-gray-500 dark:text-gray-400" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">0</div>
            <p className="text-xs text-gray-500 dark:text-gray-400">Active proxy configurations</p>
          </CardContent>
        </Card>

        {/* SSL Certificates Card */}
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0">
            <CardTitle className="text-sm font-medium">SSL Certificates</CardTitle>
            <Shield className="w-4 h-4 text-gray-500 dark:text-gray-400" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">0</div>
            <p className="text-xs text-gray-500 dark:text-gray-400">Active certificates</p>
          </CardContent>
        </Card>

        {/* Jobs Card */}
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0">
            <CardTitle className="text-sm font-medium">Jobs</CardTitle>
            <Clock className="w-4 h-4 text-gray-500 dark:text-gray-400" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">0</div>
            <p className="text-xs text-gray-500 dark:text-gray-400">Scheduled tasks</p>
          </CardContent>
        </Card>

        {/* Traffic Monitor Card */}
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0">
            <CardTitle className="text-sm font-medium">Traffic Monitor</CardTitle>
            <LineChart className="w-4 h-4 text-gray-500 dark:text-gray-400" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">0</div>
            <p className="text-xs text-gray-500 dark:text-gray-400">Active connections</p>
          </CardContent>
        </Card>
      </div>

      {/* Detailed Sections */}
      <div className="grid gap-6 md:grid-cols-2">
        {/* Recent Proxy Activity */}
        <Card>
          <CardHeader>
            <CardTitle>Recent Proxy Activity</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center justify-center h-[200px] border-2 border-dashed rounded-lg border-gray-200 dark:border-gray-700">
              <p className="text-gray-500 dark:text-gray-400">No recent activity</p>
            </div>
          </CardContent>
        </Card>

        {/* Traffic Stats */}
        <Card>
          <CardHeader>
            <CardTitle>Traffic Statistics</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center justify-center h-[200px] border-2 border-dashed rounded-lg border-gray-200 dark:border-gray-700">
              <p className="text-gray-500 dark:text-gray-400">No traffic data available</p>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}

================
File: src/app/(auth)/proxy_hosts/components/AddHostDialog.tsx
================
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/app/components/ui/dialog"
import { Button } from "@/app/components/ui/button"
import { AddHostForm } from "./AddHostForm"
import { useApi } from "@/lib/hooks/useApi"
import { useState } from "react"
import { CaddyHost } from "@/lib/caddy/types"

interface AddHostDialogProps {
  onHostAdded: () => void
}

type NewHostData = Omit<CaddyHost, 'id' | 'createdAt' | 'updatedAt'>

export function AddHostDialog({ onHostAdded }: AddHostDialogProps) {
  const [open, setOpen] = useState(false)
  const api = useApi()

  const handleSubmit = async (data: NewHostData) => {
    const response = await api.post('/api/hosts', data, {
      showSuccessToast: true,
      successMessage: 'Host added successfully'
    })
    
    if (response) {
      setOpen(false)
      onHostAdded()
    }
  }

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button>Add Host</Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[600px]">
        <DialogHeader>
          <DialogTitle>Add New Host</DialogTitle>
        </DialogHeader>
        <AddHostForm 
          onSubmit={handleSubmit}
          onCancel={() => setOpen(false)}
        />
      </DialogContent>
    </Dialog>
  )
}

================
File: src/app/(auth)/proxy_hosts/components/AddHostForm.tsx
================
import { useState } from 'react'
import { Button } from "@/app/components/ui/button"
import { Input } from "@/app/components/ui/input"
import { useToast } from "@/app/components/ui/use-toast"
import { Label } from "@/app/components/ui/label"
import { CaddyHost } from "@/lib/caddy/types"

interface AddHostFormProps {
  onSubmit: (data: Omit<CaddyHost, 'id' | 'createdAt' | 'updatedAt'>) => void
  onCancel: () => void
}

export function AddHostForm({ onSubmit, onCancel }: AddHostFormProps) {
  const { toast } = useToast()
  const [formData, setFormData] = useState({
    domain: '',
    targetHost: '',
    targetPort: '80',
    ssl: true,
    forceSSL: true,
  })
  const [errors, setErrors] = useState<Record<string, string>>({})

  const validateForm = () => {
    const newErrors: Record<string, string> = {}

    // Domain validation
    if (!formData.domain) {
      newErrors.domain = 'Domain is required'
    } else if (!/^([a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]\.)+[a-zA-Z]{2,}$|^(\d{1,3}\.){3}\d{1,3}$/.test(formData.domain)) {
      newErrors.domain = 'Invalid domain or IP address'
    }

    // Target Host validation
    if (!formData.targetHost) {
      newErrors.targetHost = 'Target host is required'
    } else if (!/^localhost$|^(\d{1,3}\.){3}\d{1,3}$|^([a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]\.)+[a-zA-Z]{2,}$/.test(formData.targetHost)) {
      newErrors.targetHost = 'Invalid target host'
    }

    // Port validation
    const port = parseInt(formData.targetPort)
    if (isNaN(port) || port < 1 || port > 65535) {
      newErrors.targetPort = 'Invalid port number (1-65535)'
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    
    if (validateForm()) {
      onSubmit({
        ...formData,
        targetPort: parseInt(formData.targetPort),
        enabled: true
      })
    } else {
      toast({
        title: "Invalid Form",
        description: "Please correct the errors below",
        variant: "destructive"
      })
    }
  }

  const handleSSLChange = (enabled: boolean) => {
    setFormData({
      ...formData,
      ssl: enabled,
      forceSSL: enabled
    })
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <div className="space-y-4">
        <div className="space-y-2">
          <Label htmlFor="domain">Domain</Label>
          <Input
            id="domain"
            placeholder="example.com"
            value={formData.domain}
            onChange={(e) => setFormData({ ...formData, domain: e.target.value })}
            className={errors.domain ? "border-red-500" : ""}
          />
          {errors.domain && <p className="text-sm text-red-500">{errors.domain}</p>}
        </div>

        <div className="space-y-2">
          <Label htmlFor="targetHost">Target Host or IP Address</Label>
          <Input
            id="targetHost"
            placeholder="localhost"
            value={formData.targetHost}
            onChange={(e) => setFormData({ ...formData, targetHost: e.target.value })}
            className={errors.targetHost ? "border-red-500" : ""}
          />
          {errors.targetHost && <p className="text-sm text-red-500">{errors.targetHost}</p>}
        </div>

        <div className="space-y-2">
          <Label htmlFor="targetPort">Port</Label>
          <Input
            id="targetPort"
            type="number"
            placeholder="80"
            value={formData.targetPort}
            onChange={(e) => setFormData({ ...formData, targetPort: e.target.value })}
            className={errors.targetPort ? "border-red-500" : ""}
          />
          {errors.targetPort && <p className="text-sm text-red-500">{errors.targetPort}</p>}
        </div>

        <div className="space-y-2">
          <Label htmlFor="ssl">SSL</Label>
          <div className="flex items-center space-x-2">
            <input
              id="ssl"
              type="checkbox"
              checked={formData.ssl}
              onChange={(e) => handleSSLChange(e.target.checked)}
              className="rounded border-gray-300"
            />
            <span className="text-sm text-gray-600">Enable SSL (recommended)</span>
          </div>
        </div>
      </div>

      <div className="flex justify-end space-x-2">
        <Button type="button" variant="outline" onClick={onCancel}>
          Cancel
        </Button>
        <Button type="submit">
          Add Host
        </Button>
      </div>
    </form>
  )
}

================
File: src/app/(auth)/proxy_hosts/components/DeleteHostDialog.tsx
================
import { useState } from "react"
import { CaddyHost } from "@/lib/caddy/types"
import { Button } from "@/app/components/ui/button"
import { Spinner } from "@/app/components/ui/spinner"
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/app/components/ui/alert-dialog"

interface DeleteHostDialogProps {
  host: CaddyHost
  onDelete: (host: CaddyHost) => Promise<void>
}

export function DeleteHostDialog({ host, onDelete }: DeleteHostDialogProps) {
  const [isDeleting, setIsDeleting] = useState(false)
  const [open, setOpen] = useState(false)

  const handleDelete = async () => {
    setIsDeleting(true)
    try {
      await onDelete(host)
      setOpen(false)
    } finally {
      setIsDeleting(false)
    }
  }

  return (
    <AlertDialog open={open} onOpenChange={setOpen}>
      <AlertDialogTrigger asChild>
        <Button variant="destructive" size="sm">
          Delete
        </Button>
      </AlertDialogTrigger>
      <AlertDialogContent>
        <AlertDialogHeader>
          <AlertDialogTitle>Delete Proxy Host</AlertDialogTitle>
          <AlertDialogDescription>
            Are you sure you want to delete the proxy host for{" "}
            <span className="font-semibold">{host.domain}</span>? This action
            cannot be undone.
          </AlertDialogDescription>
        </AlertDialogHeader>
        <AlertDialogFooter>
          <AlertDialogCancel disabled={isDeleting}>Cancel</AlertDialogCancel>
          <AlertDialogAction
            onClick={handleDelete}
            disabled={isDeleting}
            className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
          >
            {isDeleting ? (
              <>
                <Spinner size="sm" className="mr-2" />
                Deleting...
              </>
            ) : (
              "Delete"
            )}
          </AlertDialogAction>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  )
}

================
File: src/app/(auth)/proxy_hosts/components/ProxyHostsTable.tsx
================
/* eslint-disable react-hooks/exhaustive-deps */
'use client'
import { useHosts } from "../../../../lib/hooks/useHosts"
import { Button } from "../../../components/ui/button"
import { Card } from "../../../components/ui/card"
import { AddHostDialog } from "./AddHostDialog"
import { DeleteHostDialog } from "./DeleteHostDialog"
import { ToggleHostDialog } from "./ToggleHostDialog"
import { TableLoadingSpinner, Spinner } from "../../../components/ui/spinner"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "../../../components/ui/tooltip"

export default function ProxyHostsTable() {
  const { hosts, isLoading, error, deleteHost, mutate } = useHosts()

  if (error) {
    return (
      <Card className="p-6">
        <div className="text-red-500">Error loading hosts: {error.message}</div>
      </Card>
    )
  }

  if (isLoading) {
    return <TableLoadingSpinner />
  }

  return (
    <Card className="p-6">
      <div className="space-y-8">
        <div className="flex items-center justify-between">
          <div className="space-y-1">
            <h2 className="text-2xl font-semibold tracking-tight">Proxy Hosts</h2>
            <p className="text-sm text-muted-foreground">
              Manage your proxy host configurations
            </p>
          </div>
          <div className="flex items-center space-x-2">
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant="outline"
                    size="icon"
                    onClick={() => mutate()}
                    disabled={isLoading}
                  >
                    {isLoading ? (
                      <Spinner size="sm" />
                    ) : (
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        width="16"
                        height="16"
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        strokeWidth="2"
                        strokeLinecap="round"
                        strokeLinejoin="round"
                      >
                        <path d="M21 2v6h-6" />
                        <path d="M3 12a9 9 0 0 1 15-6.7L21 8" />
                        <path d="M3 22v-6h6" />
                        <path d="M21 12a9 9 0 0 1-15 6.7L3 16" />
                      </svg>
                    )}
                    <span className="sr-only">Refresh</span>
                  </Button>
                </TooltipTrigger>
                <TooltipContent>Refresh host list</TooltipContent>
              </Tooltip>
            </TooltipProvider>
            <AddHostDialog onHostAdded={mutate} />
          </div>
        </div>

        {hosts.length === 0 ? (
          <div className="rounded-lg border border-dashed p-8">
            <div className="flex flex-col items-center justify-center text-center">
              <p className="text-sm text-muted-foreground">
                No proxy hosts found
              </p>
              <p className="text-sm text-muted-foreground">
                Click the button above to add your first proxy host
              </p>
            </div>
          </div>
        ) : (
          <div className="space-y-4">
            {hosts.map((host) => (
              <div key={host.id} className="rounded-lg border border-border shadow-sm">
                <div className="p-4">
                  <div className="flex items-center justify-between">
                    <div className="space-y-1">
                      <div className="flex items-center gap-2">
                        <h3 className="font-medium">{host.domain}</h3>
                        <span className="text-sm text-muted-foreground">→</span>
                        <span className="text-sm text-muted-foreground">
                          {host.targetHost}:{host.targetPort}
                        </span>
                      </div>
                      <div className="flex items-center gap-2">
                        <span
                          className={`inline-flex items-center rounded-full px-2 py-1 text-xs font-medium ${
                            host.enabled
                              ? "bg-green-100 text-green-700"
                              : "bg-gray-100 text-gray-700"
                          }`}
                        >
                          {host.enabled ? "Active" : "Inactive"}
                        </span>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      <ToggleHostDialog host={host} onToggle={() => mutate()} />
                      <DeleteHostDialog 
                        host={host} 
                        onDelete={async () => {
                          await deleteHost(host.id)
                          await mutate()
                        }} 
                      />
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </Card>
  )
}

================
File: src/app/(auth)/proxy_hosts/components/ToggleHostDialog.tsx
================
import { useState } from "react"
import { CaddyHost } from "@/lib/caddy/types"
import { Button } from "@/app/components/ui/button"
import { Spinner } from "@/app/components/ui/spinner"
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/app/components/ui/alert-dialog"

interface ToggleHostDialogProps {
  host: CaddyHost
  onToggle: (host: CaddyHost) => Promise<void>
}

export function ToggleHostDialog({ host, onToggle }: ToggleHostDialogProps) {
  const [isToggling, setIsToggling] = useState(false)
  const [open, setOpen] = useState(false)

  const handleToggle = async () => {
    setIsToggling(true)
    try {
      await onToggle(host)
      setOpen(false)
    } finally {
      setIsToggling(false)
    }
  }

  const action = host.enabled ? "disable" : "enable"
  const actionCapitalized = action.charAt(0).toUpperCase() + action.slice(1)

  return (
    <AlertDialog open={open} onOpenChange={setOpen}>
      <AlertDialogTrigger asChild>
        <Button variant="outline" size="sm">
          {host.enabled ? "Disable" : "Enable"}
        </Button>
      </AlertDialogTrigger>
      <AlertDialogContent>
        <AlertDialogHeader>
          <AlertDialogTitle>{actionCapitalized} Proxy Host</AlertDialogTitle>
          <AlertDialogDescription>
            Are you sure you want to {action} the proxy host for{" "}
            <span className="font-semibold">{host.domain}</span>?
            {host.enabled
              ? " This will stop forwarding traffic to the target."
              : " This will start forwarding traffic to the target."}
          </AlertDialogDescription>
        </AlertDialogHeader>
        <AlertDialogFooter>
          <AlertDialogCancel disabled={isToggling}>Cancel</AlertDialogCancel>
          <AlertDialogAction
            onClick={handleToggle}
            disabled={isToggling}
            className={host.enabled ? "bg-destructive hover:bg-destructive/90" : ""}
          >
            {isToggling ? (
              <>
                <Spinner size="sm" className="mr-2" />
                {actionCapitalized}ing...
              </>
            ) : (
              actionCapitalized
            )}
          </AlertDialogAction>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  )
}

================
File: src/app/(auth)/proxy_hosts/page.tsx
================
import ProxyHostsTable from "./components/ProxyHostsTable"

export default function ProxyHostsPage() {
  return (
    <div className="container mx-auto py-8 px-4 sm:px-6 lg:px-8">
      <ProxyHostsTable />
    </div>
  )
}

================
File: src/app/(auth)/proxy_hosts/styles.module.css
================
.container {
  @apply max-w-7xl mx-auto px-4 sm:px-6 lg:px-8;
}

.loadingSpinner {
  @apply flex justify-center items-center min-h-[400px];
}

.loadingText {
  @apply text-lg text-gray-600;
}

================
File: src/app/(auth)/ssl_management/components/SSLCertsTable.tsx
================
'use client';

import { SSLCertificate } from '@/lib/caddy/types';
import { Button } from '@/app/components/ui/button';
import { Card } from '@/app/components/ui/card';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from '@/app/components/ui/alert-dialog';
import { Spinner } from '@/app/components/ui/spinner';
import { useState } from 'react';

interface SSLCertsTableProps {
  certificates: SSLCertificate[];
  onDelete: (id: string) => Promise<void>;
  isLoading?: boolean;
}

export function SSLCertsTable({ certificates, onDelete, isLoading = false }: SSLCertsTableProps) {
  const [certificateToDelete, setCertificateToDelete] = useState<string | null>(null);
  const [isDeleting, setIsDeleting] = useState(false);

  const handleDelete = async () => {
    if (!certificateToDelete || isDeleting) return;
    
    try {
      setIsDeleting(true);
      await onDelete(certificateToDelete);
      setCertificateToDelete(null);
    } catch (error) {
      console.error('Failed to delete certificate:', error);
    } finally {
      setIsDeleting(false);
    }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-[400px]">
        <Spinner className="w-8 h-8" />
      </div>
    );
  }

  return (
    <div className="grid gap-4">
      {certificates.length === 0 ? (
        <Card className="p-8 text-center text-gray-500">
          No SSL certificates found. Click &quot;Add Certificate&quot; to create one.
        </Card>
      ) : (
        certificates.map((cert) => (
          <Card key={cert.id} className="p-4">
            <div className="flex justify-between items-start">
              <div>
                <h2 className="text-xl font-semibold">{cert.domain}</h2>
                <p className="text-sm text-gray-500">Issuer: {cert.issuer}</p>
                <p className="text-sm text-gray-500">
                  Valid from: {new Date(cert.validFrom).toLocaleDateString()}
                </p>
                <p className="text-sm text-gray-500">
                  Valid to: {new Date(cert.validTo).toLocaleDateString()}
                </p>
                <p className="text-sm text-gray-500">
                  Auto-renew: {cert.autoRenew ? 'Enabled' : 'Disabled'}
                </p>
              </div>
              <AlertDialog open={certificateToDelete === cert.id}>
                <AlertDialogTrigger asChild>
                  <Button
                    variant="destructive"
                    size="sm"
                    disabled={isDeleting}
                    onClick={() => setCertificateToDelete(cert.id)}
                  >
                    {isDeleting && certificateToDelete === cert.id ? (
                      <Spinner className="w-4 h-4 mr-2" />
                    ) : null}
                    Delete
                  </Button>
                </AlertDialogTrigger>
                <AlertDialogContent>
                  <AlertDialogHeader>
                    <AlertDialogTitle>Delete Certificate</AlertDialogTitle>
                    <AlertDialogDescription>
                      Are you sure you want to delete the SSL certificate for {cert.domain}?
                      This action cannot be undone.
                    </AlertDialogDescription>
                  </AlertDialogHeader>
                  <AlertDialogFooter>
                    <AlertDialogCancel 
                      onClick={() => setCertificateToDelete(null)}
                      disabled={isDeleting}
                    >
                      Cancel
                    </AlertDialogCancel>
                    <AlertDialogAction 
                      onClick={handleDelete} 
                      disabled={isDeleting}
                    >
                      {isDeleting ? (
                        <>
                          <Spinner className="w-4 h-4 mr-2" />
                          Deleting...
                        </>
                      ) : (
                        'Delete'
                      )}
                    </AlertDialogAction>
                  </AlertDialogFooter>
                </AlertDialogContent>
              </AlertDialog>
            </div>
          </Card>
        ))
      )}
    </div>
  );
}

================
File: src/app/(auth)/ssl_management/page.tsx
================
'use client';

import { Button } from '@/app/components/ui/button';
import { useSSL } from '@/lib/hooks/useSSL';
import { useState } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/app/components/ui/dialog';
import { Input } from '@/app/components/ui/input';
import { Label } from '@/app/components/ui/label';
import { SSLCertsTable } from './components/SSLCertsTable';
import { Card } from '@/app/components/ui/card';
import { Spinner } from '@/app/components/ui/spinner';

export default function SSLManagementPage() {
  const { certificates, loading, error, createCertificate, deleteCertificate, refresh } = useSSL();
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [newDomain, setNewDomain] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleCreate = async () => {
    if (!newDomain || isSubmitting) return;
    
    try {
      setIsSubmitting(true);
      await createCertificate(newDomain);
      setNewDomain('');
      setIsCreateDialogOpen(false);
    } catch (error) {
      console.error('Failed to create certificate:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  // Show error state if there's an error
  if (error) {
    return (
      <div className="container mx-auto p-4">
        <Card className="p-8 text-center">
          <h2 className="text-xl font-bold text-red-600 mb-4">Error Loading SSL Certificates</h2>
          <p className="text-gray-600 mb-4">{error.message}</p>
          <Button 
            onClick={refresh}
            variant="outline"
          >
            Retry
          </Button>
        </Card>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-4">
      <div className="flex justify-between items-center mb-6">
        <div className="flex items-center gap-4">
          <h1 className="text-2xl font-bold">SSL Certificates</h1>
          {loading && <Spinner className="w-4 h-4" />}
        </div>
        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
          <DialogTrigger asChild>
            <Button disabled={loading}>Add Certificate</Button>
          </DialogTrigger>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Create SSL Certificate</DialogTitle>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <div className="grid gap-2">
                <Label htmlFor="domain">Domain</Label>
                <Input
                  id="domain"
                  value={newDomain}
                  onChange={(e) => setNewDomain(e.target.value)}
                  placeholder="example.com"
                  disabled={isSubmitting}
                />
              </div>
            </div>
            <Button 
              onClick={handleCreate} 
              disabled={isSubmitting || !newDomain.trim()}
            >
              {isSubmitting ? (
                <>
                  <Spinner className="w-4 h-4 mr-2" />
                  Creating...
                </>
              ) : (
                'Create Certificate'
              )}
            </Button>
          </DialogContent>
        </Dialog>
      </div>

      <SSLCertsTable 
        certificates={certificates}
        onDelete={deleteCertificate}
        isLoading={loading}
      />
    </div>
  );
}

================
File: src/app/(auth)/layout.tsx
================
import { Header } from "@/app/components/Header"

export default function AuthLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900 transition-colors">
      <Header />
      <main className="transition-colors">
        {children}
      </main>
    </div>
  )
}

================
File: src/app/api/auth/[...nextauth]/route.ts
================
import NextAuth from "next-auth";
import { authOptions } from "@/lib/auth/auth-options";

const handler = NextAuth(authOptions);

export { handler as GET, handler as POST };

================
File: src/app/api/hosts/[id]/route.ts
================
import { NextResponse } from "next/server"
import { getServerSession } from "next-auth"
import { authOptions } from "@/lib/auth/auth-options"
import { caddyManager } from "@/lib/caddy/manager"
import { CaddyConfigGenerator } from "@/lib/caddy/config"

export async function DELETE(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const session = await getServerSession(authOptions)
    if (!session) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 })
    }

    const { id } = params
    if (!id) {
      return NextResponse.json(
        { error: "Host ID is required" },
        { status: 400 }
      )
    }

    const config = await CaddyConfigGenerator.loadConfig()
    const hostExists = config.hosts?.some(h => h.id === id)
    
    if (!hostExists) {
      return NextResponse.json(
        { error: "Host not found" },
        { status: 404 }
      )
    }

    config.hosts = config.hosts?.filter(h => h.id !== id) || []
    await CaddyConfigGenerator.saveConfig(config)
    await caddyManager.reload()

    return NextResponse.json({ success: true })
  } catch (error) {
    console.error("Error deleting host:", error)
    return NextResponse.json(
      { error: "Failed to delete host" },
      { status: 500 }
    )
  }
}

================
File: src/app/api/hosts/route.ts
================
import { NextResponse } from "next/server"
import { getServerSession } from "next-auth"
import { authOptions } from "@/lib/auth/auth-options"
import { caddyManager } from "@/lib/caddy/manager"
import { CaddyConfigGenerator } from "@/lib/caddy/config"
import { CaddyHost } from "@/lib/caddy/types"
import { caddyService } from "@/lib/services/caddy-service"

export async function GET() {
  try {
    const session = await getServerSession(authOptions)
    if (!session) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 })
    }

    const config = await CaddyConfigGenerator.loadConfig()
    return NextResponse.json(config.hosts || [])
  } catch (error) {
    console.error("Error fetching hosts:", error)
    return NextResponse.json(
      { error: "Failed to fetch hosts" },
      { status: 500 }
    )
  }
}

export async function POST(request: Request) {
  try {
    const session = await getServerSession(authOptions)
    if (!session) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 })
    }

    // Ensure Caddy is running
    const status = await caddyService.getStatus()
    if (!status.initialized) {
      await caddyService.initialize()
    }

    const data = await request.json()
    const { domain, targetHost, targetPort, ssl, forceSSL, enabled } = data

    if (!domain || !targetHost || !targetPort) {
      return NextResponse.json(
        { error: "Missing required fields" },
        { status: 400 }
      )
    }

    const config = await CaddyConfigGenerator.loadConfig()
    const newHost: CaddyHost = {
      id: crypto.randomUUID(),
      domain,
      targetHost,
      targetPort,
      ssl: ssl ?? true,
      forceSSL: forceSSL ?? true,
      enabled: enabled ?? true,
      createdAt: new Date(),
      updatedAt: new Date()
    }
    
    config.hosts = [...(config.hosts || []), newHost]
    await CaddyConfigGenerator.saveConfig(config)
    await caddyManager.reload()

    return NextResponse.json(newHost)
  } catch (error) {
    console.error("Error creating host:", error)
    return NextResponse.json(
      { error: "Failed to create host" },
      { status: 500 }
    )
  }
}

export async function PUT(request: Request) {
  try {
    const session = await getServerSession(authOptions)
    if (!session) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 })
    }

    // Ensure Caddy is running
    const status = await caddyService.getStatus()
    if (!status.initialized) {
      await caddyService.initialize()
    }

    const data = await request.json()
    const { id, domain, targetHost, targetPort, ssl, forceSSL, enabled } = data

    if (!id || !domain || !targetHost || !targetPort) {
      return NextResponse.json(
        { error: "Missing required fields" },
        { status: 400 }
      )
    }

    const config = await CaddyConfigGenerator.loadConfig()
    const hostIndex = config.hosts?.findIndex(h => h.id === id)
    
    if (hostIndex === undefined || hostIndex === -1) {
      return NextResponse.json(
        { error: "Host not found" },
        { status: 404 }
      )
    }

    const existingHost = config.hosts[hostIndex]
    const updatedHost: CaddyHost = {
      ...existingHost,
      domain,
      targetHost,
      targetPort,
      ssl,
      forceSSL,
      enabled,
      updatedAt: new Date()
    }

    config.hosts[hostIndex] = updatedHost
    await CaddyConfigGenerator.saveConfig(config)
    await caddyManager.reload()

    return NextResponse.json(updatedHost)
  } catch (error) {
    console.error("Error updating host:", error)
    return NextResponse.json(
      { error: "Failed to update host" },
      { status: 500 }
    )
  }
}

export async function DELETE(request: Request) {
  try {
    const session = await getServerSession(authOptions)
    if (!session) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 })
    }

    // Ensure Caddy is running
    const status = await caddyService.getStatus()
    if (!status.initialized) {
      await caddyService.initialize()
    }

    const url = new URL(request.url)
    const id = url.searchParams.get("id")

    if (!id) {
      return NextResponse.json(
        { error: "Host ID is required" },
        { status: 400 }
      )
    }

    const config = await CaddyConfigGenerator.loadConfig()
    config.hosts = config.hosts?.filter(h => h.id !== id) || []
    
    await CaddyConfigGenerator.saveConfig(config)
    await caddyManager.reload()

    return NextResponse.json({ success: true })
  } catch (error) {
    console.error("Error deleting host:", error)
    return NextResponse.json(
      { error: "Failed to delete host" },
      { status: 500 }
    )
  }
}

================
File: src/app/api/ssl/route.ts
================
import { NextResponse } from 'next/server';
import { SSLCertificate } from '@/lib/caddy/types';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth/auth-options';
import path from 'path';
import { promises as fs } from 'fs';
import { CaddyConfigGenerator } from '@/lib/caddy/config';
import { caddyManager } from '@/lib/caddy/manager';

// Helper to ensure SSL directory exists
async function ensureSSLDirectory() {
  const sslDir = path.join(process.cwd(), 'config/ssl');
  try {
    await fs.mkdir(sslDir, { recursive: true });
    console.log('SSL directory ensured at:', sslDir);
    return sslDir;
  } catch (error) {
    console.error('Error ensuring SSL directory:', error);
    throw error;
  }
}

// Helper to read SSL certificates
async function readSSLCertificates(): Promise<SSLCertificate[]> {
  console.log('Reading SSL certificates...');
  const sslDir = await ensureSSLDirectory();
  try {
    const files = await fs.readdir(sslDir);
    console.log('Found files in SSL directory:', files);
    
    const certificates: SSLCertificate[] = [];
    
    for (const file of files) {
      if (file.endsWith('.json')) {
        const content = await fs.readFile(path.join(sslDir, file), 'utf-8');
        certificates.push(JSON.parse(content));
      }
    }
    
    console.log('Loaded certificates:', certificates);
    return certificates;
  } catch (error) {
    console.error('Error reading SSL certificates:', error);
    return [];
  }
}

// Helper to update Caddy configuration for SSL
async function updateCaddyConfig(domain: string, enableSSL: boolean = true) {
  console.log('Updating Caddy config for domain:', domain);
  try {
    const config = await CaddyConfigGenerator.loadConfig();
    const hostToUpdate = config.hosts.find(host => host.domain === domain);
    
    if (hostToUpdate) {
      hostToUpdate.ssl = enableSSL;
      hostToUpdate.forceSSL = enableSSL;
      await CaddyConfigGenerator.saveConfig(config);
      await caddyManager.reload();
      console.log('Caddy config updated and reloaded successfully');
    } else {
      console.log('No matching host found for domain:', domain);
    }
  } catch (error) {
    console.error('Error updating Caddy config:', error);
    throw error;
  }
}

export async function GET() {
  console.log('Handling GET request to /api/ssl');
  try {
    const session = await getServerSession(authOptions);
    console.log('Session status:', session ? 'Authenticated' : 'Not authenticated');

    if (!session) {
      console.log('Unauthorized access attempt');
      return new NextResponse(
        JSON.stringify({ error: 'Unauthorized' }),
        { 
          status: 401,
          headers: {
            'Content-Type': 'application/json',
          }
        }
      );
    }

    const certificates = await readSSLCertificates();
    return new NextResponse(
      JSON.stringify(certificates),
      { 
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    );
  } catch (error) {
    console.error('Error in GET /api/ssl:', error);
    return new NextResponse(
      JSON.stringify({ 
        error: 'Internal Server Error',
        details: error instanceof Error ? error.message : 'Unknown error'
      }),
      { 
        status: 500,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    );
  }
}

export async function POST(request: Request) {
  console.log('Handling POST request to /api/ssl');
  try {
    const session = await getServerSession(authOptions);
    console.log('Session status:', session ? 'Authenticated' : 'Not authenticated');

    if (!session) {
      console.log('Unauthorized access attempt');
      return new NextResponse(
        JSON.stringify({ error: 'Unauthorized' }),
        { 
          status: 401,
          headers: {
            'Content-Type': 'application/json',
          }
        }
      );
    }

    const data = await request.json();
    console.log('Received data:', data);
    const { domain } = data;

    if (!domain) {
      return new NextResponse(
        JSON.stringify({ error: 'Domain is required' }),
        { 
          status: 400,
          headers: {
            'Content-Type': 'application/json',
          }
        }
      );
    }

    // Create SSL certificate
    const certificate: SSLCertificate = {
      id: crypto.randomUUID(),
      domain,
      issuer: 'Let\'s Encrypt',
      validFrom: new Date(),
      validTo: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000), // 90 days validity
      autoRenew: true
    };

    console.log('Created certificate:', certificate);

    // Save certificate
    const sslDir = await ensureSSLDirectory();
    const certPath = path.join(sslDir, `${certificate.id}.json`);
    await fs.writeFile(certPath, JSON.stringify(certificate, null, 2));
    console.log('Saved certificate to:', certPath);

    // Update Caddy configuration
    await updateCaddyConfig(domain, true);

    return new NextResponse(
      JSON.stringify(certificate),
      { 
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    );
  } catch (error) {
    console.error('Error in POST /api/ssl:', error);
    return new NextResponse(
      JSON.stringify({ 
        error: 'Internal Server Error',
        details: error instanceof Error ? error.message : 'Unknown error'
      }),
      { 
        status: 500,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    );
  }
}

export async function DELETE(request: Request) {
  console.log('Handling DELETE request to /api/ssl');
  try {
    const session = await getServerSession(authOptions);
    console.log('Session status:', session ? 'Authenticated' : 'Not authenticated');

    if (!session) {
      console.log('Unauthorized access attempt');
      return new NextResponse(
        JSON.stringify({ error: 'Unauthorized' }),
        { 
          status: 401,
          headers: {
            'Content-Type': 'application/json',
          }
        }
      );
    }

    const { searchParams } = new URL(request.url);
    const id = searchParams.get('id');
    console.log('Delete request for certificate ID:', id);

    if (!id) {
      return new NextResponse(
        JSON.stringify({ error: 'Certificate ID is required' }),
        { 
          status: 400,
          headers: {
            'Content-Type': 'application/json',
          }
        }
      );
    }

    const sslDir = await ensureSSLDirectory();
    const certPath = path.join(sslDir, `${id}.json`);
    console.log('Attempting to delete certificate at:', certPath);
    
    // Read certificate before deleting to get domain
    let domain: string | undefined;
    try {
      const certContent = await fs.readFile(certPath, 'utf-8');
      const cert = JSON.parse(certContent) as SSLCertificate;
      domain = cert.domain;
    } catch {
      console.log('Certificate file not found:', certPath);
      return new NextResponse(
        JSON.stringify({ error: 'Certificate not found' }),
        { 
          status: 404,
          headers: {
            'Content-Type': 'application/json',
          }
        }
      );
    }

    // Delete the certificate file
    await fs.unlink(certPath);
    console.log('Successfully deleted certificate:', certPath);

    // Update Caddy configuration if we found the domain
    if (domain) {
      await updateCaddyConfig(domain, false);
    }
    
    return new NextResponse(
      JSON.stringify({ success: true }),
      { 
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    );
  } catch (error) {
    console.error('Error in DELETE /api/ssl:', error);
    return new NextResponse(
      JSON.stringify({ 
        error: 'Internal Server Error',
        details: error instanceof Error ? error.message : 'Unknown error'
      }),
      { 
        status: 500,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    );
  }
}

================
File: src/app/api/system/init/route.ts
================
import { NextResponse } from 'next/server';
import { caddyService } from '@/lib/services/caddy-service';

// This endpoint will be called during application startup
export async function POST() {
  try {
    await caddyService.initialize();
    const status = await caddyService.getStatus();
    
    return NextResponse.json({
      success: true,
      status
    });
  } catch (error) {
    console.error('Failed to initialize system:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : 'Failed to initialize system' 
      },
      { status: 500 }
    );
  }
}

// Endpoint to check system status
export async function GET() {
  try {
    const status = await caddyService.getStatus();
    return NextResponse.json({
      success: true,
      status
    });
  } catch (error) {
    console.error('Failed to get system status:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : 'Failed to get system status' 
      },
      { status: 500 }
    );
  }
}

================
File: src/app/components/ui/alert-dialog.tsx
================
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/app/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName = AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

================
File: src/app/components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: src/app/components/ui/card.tsx
================
import { ReactNode } from 'react'

export interface CardProps {
  children: ReactNode
  className?: string
}

export interface CardHeaderProps {
  children: ReactNode
  className?: string
}

export interface CardTitleProps {
  children: ReactNode
  className?: string
}

export interface CardContentProps {
  children: ReactNode
  className?: string
}

export function Card({ children, className = "" }: CardProps) {
  return (
    <div className={`bg-white dark:bg-gray-800 rounded-lg shadow-sm transition-all hover:shadow-md ${className}`}>
      {children}
    </div>
  )
}

export function CardHeader({ children, className = "" }: CardHeaderProps) {
  return (
    <div className={`p-6 pb-3 ${className}`}>
      {children}
    </div>
  )
}

export function CardTitle({ children, className = "" }: CardTitleProps) {
  return (
    <h3 className={`font-semibold leading-none tracking-tight ${className}`}>
      {children}
    </h3>
  )
}

export function CardContent({ children, className = "" }: CardContentProps) {
  return (
    <div className={`p-6 pt-3 ${className}`}>
      {children}
    </div>
  )
}

================
File: src/app/components/ui/dialog.tsx
================
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

================
File: src/app/components/ui/input.tsx
================
import * as React from "react"
import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.InputHTMLAttributes<HTMLInputElement>>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: src/app/components/ui/label.tsx
================
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cn } from "@/lib/utils"
 
const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(
      "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
      className
    )}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName
 
export { Label }

================
File: src/app/components/ui/spinner.tsx
================
import { cn } from "@/lib/utils"

interface SpinnerProps {
  className?: string
  size?: "sm" | "md" | "lg"
}

export function Spinner({ className, size = "md" }: SpinnerProps) {
  const sizeClasses = {
    sm: "h-4 w-4",
    md: "h-6 w-6",
    lg: "h-8 w-8",
  }

  return (
    <svg
      className={cn(
        "animate-spin text-current",
        sizeClasses[size],
        className
      )}
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
    >
      <circle
        className="opacity-25"
        cx="12"
        cy="12"
        r="10"
        stroke="currentColor"
        strokeWidth="4"
      />
      <path
        className="opacity-75"
        fill="currentColor"
        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
      />
    </svg>
  )
}

export function LoadingOverlay() {
  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
      <div className="bg-white p-4 rounded-lg shadow-lg flex items-center space-x-2">
        <Spinner size="md" className="text-primary" />
        <span className="text-sm font-medium">Loading...</span>
      </div>
    </div>
  )
}

export function TableLoadingSpinner() {
  return (
    <div className="flex justify-center items-center min-h-[400px]">
      <div className="flex flex-col items-center space-y-2">
        <Spinner size="lg" className="text-primary" />
        <span className="text-sm text-gray-500 font-medium">Loading...</span>
      </div>
    </div>
  )
}

================
File: src/app/components/ui/toast.tsx
================
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

================
File: src/app/components/ui/toaster.tsx
================
"use client"

import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "./toast"
import { useToast } from "./use-toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(({ id, title, description, action, ...props }) => {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

================
File: src/app/components/ui/tooltip.tsx
================
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

================
File: src/app/components/ui/use-toast.ts
================
"use client"

import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "./toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_VALUE
  return count.toString()
}

type Action =
  | {
      type: typeof actionTypes.ADD_TOAST
      toast: ToasterToast
    }
  | {
      type: typeof actionTypes.UPDATE_TOAST
      toast: Partial<ToasterToast>
    }
  | {
      type: typeof actionTypes.DISMISS_TOAST
      toastId?: ToasterToast["id"]
    }
  | {
      type: typeof actionTypes.REMOVE_TOAST
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: actionTypes.REMOVE_TOAST,
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case actionTypes.ADD_TOAST:
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case actionTypes.UPDATE_TOAST:
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case actionTypes.DISMISS_TOAST: {
      const { toastId } = action

      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case actionTypes.REMOVE_TOAST:
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: actionTypes.UPDATE_TOAST,
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: actionTypes.DISMISS_TOAST, toastId: id })

  dispatch({
    type: actionTypes.ADD_TOAST,
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open: boolean) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: actionTypes.DISMISS_TOAST, toastId }),
  }
}

export { useToast, toast }

================
File: src/app/components/Header.tsx
================
'use client'

import Link from 'next/link'
import { usePathname } from 'next/navigation'
import { Sun, Moon, LogOut } from 'lucide-react'
import { signOut } from 'next-auth/react'
import { useTheme } from 'next-themes'
import { useEffect, useState } from 'react'

export function Header() {
  const pathname = usePathname()
  const { theme, setTheme } = useTheme()
  const [mounted, setMounted] = useState(false)

  // Avoid hydration mismatch
  useEffect(() => {
    setMounted(true)
  }, [])

  const navigation = [
    { name: 'Dashboard', href: '/main' },
    { name: 'Proxy Hosts', href: '/proxy_hosts' },
    { name: 'SSL Certificates', href: '/ssl_management' },
    { name: 'Jobs', href: '/jobs_management' },
  ]

  const isActive = (path: string) => pathname === path

  return (
    <header className="sticky top-0 z-50 w-full border-b border-gray-200 dark:border-gray-800 bg-white dark:bg-gray-900">
      <div className="flex h-16 items-center px-4 md:px-6">
        <nav className="flex-1">
          <ul className="flex space-x-4">
            {navigation.map((item) => (
              <li key={item.name}>
                <Link
                  href={item.href}
                  className={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${
                    isActive(item.href)
                      ? 'bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-white'
                      : 'text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white hover:bg-gray-100 dark:hover:bg-gray-800'
                  }`}
                >
                  {item.name}
                </Link>
              </li>
            ))}
          </ul>
        </nav>

        <div className="flex items-center space-x-4">
          {mounted && (
            <button
              onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
              className="p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
              aria-label="Toggle theme"
            >
              {theme === 'dark' ? (
                <Sun className="h-5 w-5 text-gray-500 dark:text-gray-400" />
              ) : (
                <Moon className="h-5 w-5 text-gray-500 dark:text-gray-400" />
              )}
            </button>
          )}

          <button
            onClick={() => signOut()}
            className="p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors text-gray-500 dark:text-gray-400"
            aria-label="Logout"
          >
            <LogOut className="h-5 w-5" />
          </button>
        </div>
      </div>
    </header>
  )
}

================
File: src/app/components/Logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 800 200">
  <!-- Definitions -->
  <defs>
    <linearGradient id="nextGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#000000"/>
      <stop offset="100%" style="stop-color:#333333"/>
    </linearGradient>
  </defs>

  <!-- Light Mode (Left) -->
  <g transform="translate(20, 10)">
    <!-- Light Mode Background -->
    <rect x="-10" y="-10" width="380" height="180" fill="white" rx="10"/>
    
    <!-- Icon -->
    <g transform="translate(20, 40)">
      <!-- Stylized 'C' for Caddy -->
      <path d="M40,10 A30,30 0 0,1 40,70" 
            stroke="#000000" 
            stroke-width="12" 
            fill="none" 
            stroke-linecap="round"/>
      
      <!-- Arrow representing 'Next' -->
      <path d="M35,40 L65,40 L55,30 M65,40 L55,50" 
            stroke="#000000" 
            stroke-width="8" 
            fill="none" 
            stroke-linecap="round" 
            stroke-linejoin="round"/>
    </g>
    
    <!-- Text -->
    <g transform="translate(100, 30)">
      <text x="0" y="45" 
            font-family="Arial, sans-serif" 
            font-weight="600" 
            font-size="40" 
            fill="#000000">
        CADDY NEXT
      </text>
      <text x="3" y="65" 
            font-family="Arial, sans-serif" 
            font-size="14" 
            fill="#666666"
            letter-spacing="2">
        PROXY MANAGER
      </text>
    </g>
  </g>

  <!-- Dark Mode (Right) -->
  <g transform="translate(420, 10)">
    <!-- Dark Mode Background -->
    <rect x="-10" y="-10" width="380" height="180" fill="#000000" rx="10"/>
    
    <!-- Icon -->
    <g transform="translate(20, 40)">
      <!-- Stylized 'C' for Caddy -->
      <path d="M40,10 A30,30 0 0,1 40,70" 
            stroke="#FFFFFF" 
            stroke-width="12" 
            fill="none" 
            stroke-linecap="round"/>
      
      <!-- Arrow representing 'Next' -->
      <path d="M35,40 L65,40 L55,30 M65,40 L55,50" 
            stroke="#FFFFFF" 
            stroke-width="8" 
            fill="none" 
            stroke-linecap="round" 
            stroke-linejoin="round"/>
    </g>
    
    <!-- Text -->
    <g transform="translate(100, 30)">
      <text x="0" y="45" 
            font-family="Arial, sans-serif" 
            font-weight="600" 
            font-size="40" 
            fill="#FFFFFF">
        CADDY NEXT
      </text>
      <text x="3" y="65" 
            font-family="Arial, sans-serif" 
            font-size="14" 
            fill="#999999"
            letter-spacing="2">
        PROXY MANAGER
      </text>
    </g>
  </g>
</svg>

================
File: src/app/components/Logo.tsx
================
import React from 'react';

interface LogoProps {
  className?: string;
  width?: number;
  height?: number;
}

export default function Logo({ className = '', width = 800, height = 200 }: LogoProps) {
  return (
    <svg 
      xmlns="http://www.w3.org/2000/svg" 
      viewBox="0 0 800 200"
      width={width}
      height={height}
      className={className}
    >
      <defs>
        <linearGradient id="nextGradient" x1="0%" y1="0%" x2="100%" y2="100%">
          <stop offset="0%" style={{stopColor:"#000000"}}/>
          <stop offset="100%" style={{stopColor:"#333333"}}/>
        </linearGradient>
      </defs>

      <g transform="translate(20, 10)">
        <g transform="translate(20, 40)">
          <path d="M40,10 A30,30 0 0,1 40,70" 
                className="dark:stroke-white stroke-black"
                strokeWidth="12" 
                fill="none" 
                strokeLinecap="round"/>
          
          <path d="M35,40 L65,40 L55,30 M65,40 L55,50" 
                className="dark:stroke-white stroke-black"
                strokeWidth="8" 
                fill="none" 
                strokeLinecap="round" 
                strokeLinejoin="round"/>
        </g>
        
        <g transform="translate(100, 30)">
          <text x="0" y="45" 
                fontFamily="Arial, sans-serif" 
                fontWeight="600" 
                fontSize="40" 
                className="dark:fill-white fill-black">
            CADDY NEXT
          </text>
          <text x="3" y="65" 
                fontFamily="Arial, sans-serif" 
                fontSize="14" 
                className="dark:fill-gray-400 fill-gray-600"
                letterSpacing="2">
            PROXY MANAGER
          </text>
        </g>
      </g>
    </svg>
  );
}

================
File: src/app/components/SystemInitializer.tsx
================
'use client';

import { useEffect } from 'react';

export function SystemInitializer() {
  useEffect(() => {
    const initializeSystem = async () => {
      try {
        const response = await fetch('/api/system/init', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
        });

        if (!response.ok) {
          const data = await response.json();
          console.error('Failed to initialize system:', data.error);
          return;
        }

        const data = await response.json();
        console.log('System initialized successfully:', data);
      } catch (error) {
        console.error('Error initializing system:', error);
      }
    };

    initializeSystem();

    // No cleanup needed as Caddy service handles shutdown via process signals
  }, []);

  // This component doesn't render anything
  return null;
}

================
File: src/app/login/components/LoginForm.tsx
================
"use client";

import { useState } from "react";
import { signIn } from "next-auth/react";
import { useRouter } from "next/navigation";

export default function LoginForm() {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const router = useRouter();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    setIsLoading(true);

    try {
      const result = await signIn("credentials", {
        username,
        password,
        redirect: false,
      });

      if (result?.error) {
        setError("Invalid username or password");
      } else {
        router.push("/main");
        router.refresh();
      }
    } catch (err) {
      console.error("Login error:", err);
      setError("An error occurred during login");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <div>
        <label
          htmlFor="username"
          className="block text-sm font-medium text-gray-700 dark:text-gray-200"
        >
          Username
        </label>
        <div className="mt-1">
          <input
            id="username"
            name="username"
            type="text"
            required
            value={username}
            onChange={(e) => setUsername(e.target.value)}
            className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          />
        </div>
      </div>

      <div>
        <label
          htmlFor="password"
          className="block text-sm font-medium text-gray-700 dark:text-gray-200"
        >
          Password
        </label>
        <div className="mt-1">
          <input
            id="password"
            name="password"
            type="password"
            required
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          />
        </div>
      </div>

      {error && (
        <div className="text-red-500 text-sm mt-2">
          {error}
        </div>
      )}

      <div>
        <button
          type="submit"
          disabled={isLoading}
          className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {isLoading ? "Signing in..." : "Sign in"}
        </button>
      </div>
    </form>
  );
}

================
File: src/app/login/page.tsx
================
import Logo from "../components/Logo";
import LoginForm from "./components/LoginForm";
import { getServerSession } from "next-auth";
import { redirect } from "next/navigation";

export default async function LoginPage() {
  // If user is already logged in, redirect to main page
  const session = await getServerSession();
  if (session) {
    redirect("/main");
  }

  return (
    <div className="min-h-screen flex">
      {/* Left Column - Logo and Details */}
      <div className="hidden lg:flex w-1/2 bg-gradient-to-br from-blue-500 to-blue-600 text-white p-12 flex-col justify-between relative overflow-hidden">
        {/* Background Pattern */}
        <div className="absolute inset-0 bg-grid-white/[0.05] bg-[size:30px_30px]" />
        
        {/* Content */}
        <div className="relative z-10">
          <div className="w-48 h-48 mb-12">
            <Logo />
          </div>
          <h1 className="text-4xl font-bold mb-4">
            Caddy Proxy Manager
          </h1>
          <p className="text-xl text-blue-100 max-w-md">
            Simple and efficient proxy management with modern interface and powerful features.
          </p>
        </div>

        {/* Footer */}
        <div className="relative z-10">
          <p className="text-sm text-blue-100">
            © 2024 Caddy Proxy Manager. All rights reserved.
          </p>
        </div>
      </div>

      {/* Right Column - Login Form */}
      <div className="w-full lg:w-1/2 flex items-center justify-center p-8 bg-gray-50 dark:bg-gray-900">
        <div className="w-full max-w-md space-y-8">
          {/* Mobile Logo - only shown on small screens */}
          <div className="lg:hidden flex flex-col items-center space-y-4 mb-8">
            <div className="w-24 h-24">
              <Logo />
            </div>
            <h1 className="text-2xl font-bold text-gray-900 dark:text-white text-center">
              Caddy Proxy Manager
            </h1>
          </div>

          <div className="bg-white dark:bg-gray-800 shadow-xl rounded-2xl p-8">
            <div className="mb-8">
              <h2 className="text-2xl font-bold text-gray-900 dark:text-white">
                Welcome back
              </h2>
              <p className="mt-2 text-sm text-gray-600 dark:text-gray-400">
                Sign in to your admin account
              </p>
            </div>

            <LoginForm />
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;
 
@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;
    --primary: 240 5.9% 10%;
    --primary-foreground: 0 0% 98%;
    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;
    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;
    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --ring: 240 5% 64.9%;
    --radius: 0.5rem;
  }
 
  .dark {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;
    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 240 5.9% 10%;
    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;
    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 240 4.9% 83.9%;
  }
}
 
@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

================
File: src/app/layout.tsx
================
import './globals.css'
import { GeistSans } from 'geist/font/sans'
import { GeistMono } from 'geist/font/mono'
import Providers from './providers'
import { Toaster } from './components/ui/toaster'
import { TooltipProvider } from './components/ui/tooltip'
import { SystemInitializer } from './components/SystemInitializer'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body className={`font-sans antialiased`}>
        <Providers>
          <TooltipProvider>
            <SystemInitializer />
            {children}
            <Toaster />
          </TooltipProvider>
        </Providers>
      </body>
    </html>
  )
}

================
File: src/app/page.tsx
================
import { getServerSession } from "next-auth";
import { redirect } from "next/navigation";
import Logo from "./components/Logo";

export default async function Home() {
  const session = await getServerSession();
  
  // Redirect after a brief delay to show the splash screen
  if (session) {
    redirect("/main");
  } else {
    redirect("/login");
  }

  // This splash screen will be shown briefly before redirect
  return (
    <div className="min-h-screen flex">
      {/* Left Column - Logo and Details */}
      <div className="hidden lg:flex w-1/2 bg-gradient-to-br from-blue-500 to-blue-600 text-white p-12 flex-col justify-between relative overflow-hidden">
        {/* Background Pattern */}
        <div className="absolute inset-0 bg-grid-white/[0.05] bg-[size:30px_30px]" />
        
        {/* Content */}
        <div className="relative z-10">
          <div className="w-48 h-48 mb-12">
            <Logo />
          </div>
          <h1 className="text-4xl font-bold mb-4">
            Caddy Proxy Manager
          </h1>
          <p className="text-xl text-blue-100 max-w-md">
            Simple and efficient proxy management with modern interface and powerful features.
          </p>
        </div>

        {/* Footer */}
        <div className="relative z-10">
          <p className="text-sm text-blue-100">
            © 2024 Caddy Proxy Manager. All rights reserved.
          </p>
        </div>
      </div>

      {/* Right Column - Loading State */}
      <div className="w-full lg:w-1/2 flex items-center justify-center p-8 bg-gray-50 dark:bg-gray-900">
        <div className="w-full max-w-md space-y-8">
          {/* Mobile Logo - only shown on small screens */}
          <div className="lg:hidden flex flex-col items-center space-y-4">
            <div className="w-24 h-24">
              <Logo />
            </div>
            <h1 className="text-2xl font-bold text-gray-900 dark:text-white text-center">
              Caddy Proxy Manager
            </h1>
          </div>

          <div className="flex flex-col items-center justify-center space-y-4">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500" />
            <p className="text-gray-600 dark:text-gray-400">
              Loading...
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: src/app/providers.tsx
================
"use client";

import { SessionProvider } from "next-auth/react";

export default function Providers({ children }: { children: React.ReactNode }) {
  return <SessionProvider>{children}</SessionProvider>;
}

================
File: src/lib/auth/auth-options.ts
================
import CredentialsProvider from "next-auth/providers/credentials";
import type { User } from "next-auth";
import type { NextAuthOptions } from "next-auth";

// Default admin credentials - should be overridden by environment variables
const DEFAULT_ADMIN_USER = "admin";
const DEFAULT_ADMIN_PASS = "admin";

export const authOptions: NextAuthOptions = {
  providers: [
    CredentialsProvider({
      name: "Credentials",
      credentials: {
        username: { label: "Username", type: "text" },
        password: { label: "Password", type: "password" },
      },
      async authorize(credentials): Promise<User | null> {
        if (!credentials?.username || !credentials?.password) {
          throw new Error("Missing credentials");
        }

        // Get admin credentials from environment variables or use defaults
        const adminUser = process.env.ADMIN_USERNAME || DEFAULT_ADMIN_USER;
        const adminPass = process.env.ADMIN_PASSWORD || DEFAULT_ADMIN_PASS;

        // Check if credentials match
        if (
          credentials.username === adminUser &&
          credentials.password === adminPass
        ) {
          return {
            id: "1",
            name: adminUser,
            email: `${adminUser}@local.host`,
          };
        }

        throw new Error("Invalid credentials");
      },
    }),
  ],
  pages: {
    signIn: "/login",
  },
  session: {
    strategy: "jwt",
    maxAge: 24 * 60 * 60, // 24 hours
  },
  callbacks: {
    async jwt({ token, user }) {
      if (user) {
        token.id = user.id;
      }
      return token;
    },
    async session({ session, token }) {
      if (session?.user) {
        session.user.id = token.id as string;
      }
      return session;
    },
  },
};

================
File: src/lib/caddy/config.ts
================
import { CaddyHost, CaddyConfig } from './types';
import path from 'path';
import { promises as fs } from 'fs';

export class CaddyConfigGenerator {
  private static generateHostBlock(host: CaddyHost): string {
    const lines: string[] = [];
    
    // Domain definition
    lines.push(`${host.domain} {`);
    
    // SSL configuration
    if (host.ssl) {
      lines.push('  tls {');
      lines.push('    on_demand');
      lines.push('  }');
    }
    
    // Reverse proxy configuration
    lines.push('  reverse_proxy {');
    lines.push(`    to ${host.targetHost}:${host.targetPort}`);
    lines.push('    header_up Host {upstream_hostport}');
    lines.push('    header_up X-Real-IP {remote_host}');
    lines.push('    header_up X-Forwarded-For {remote_host}');
    lines.push('    header_up X-Forwarded-Proto {scheme}');
    lines.push('  }');
    
    lines.push('}');
    
    // Force SSL redirect if enabled
    if (host.forceSSL) {
      lines.push(`${host.domain}:80 {`);
      lines.push('  redir https://{host}{uri} permanent');
      lines.push('}');
    }
    
    return lines.join('\n');
  }

  public static generateCaddyfile(config: CaddyConfig): string {
    const lines: string[] = [];
    
    // Global settings
    lines.push('{');
    lines.push('  # Global options');
    lines.push('  admin off');
    lines.push('  persist_config off');
    
    if (config.globalSettings?.logLevel) {
      lines.push(`  debug ${config.globalSettings.logLevel.toLowerCase()}`);
    }
    
    if (config.globalSettings?.defaultSNIHost) {
      lines.push(`  default_sni ${config.globalSettings.defaultSNIHost}`);
    }
    
    lines.push('}');
    lines.push('');
    
    // Import all host configurations
    lines.push('# Import host configurations');
    lines.push('import config/hosts/*.conf');
    
    return lines.join('\n');
  }

  public static generateHostConfig(host: CaddyHost): string {
    if (!host.enabled) {
      return `# Host ${host.domain} is disabled`;
    }
    return this.generateHostBlock(host);
  }

  public static getHostConfigPath(hostId: string): string {
    return path.join(process.cwd(), 'config', 'hosts', `${hostId}.conf`);
  }

  public static getCaddyfilePath(): string {
    return path.join(process.cwd(), 'config', 'Caddyfile');
  }

  public static getConfigPath(): string {
    return path.join(process.cwd(), 'config', 'config.json');
  }

  public static async loadConfig(): Promise<CaddyConfig> {
    try {
      const configPath = this.getConfigPath();
      const configData = await fs.readFile(configPath, 'utf-8');
      return JSON.parse(configData);
    } catch (error) {
      // Return default config if file doesn't exist
      return {
        hosts: [],
        globalSettings: {
          logLevel: 'INFO'
        }
      };
    }
  }

  public static async saveConfig(config: CaddyConfig): Promise<void> {
    const configPath = this.getConfigPath();
    await fs.writeFile(configPath, JSON.stringify(config, null, 2));

    // Generate and save individual host configs
    const hostsDir = path.join(process.cwd(), 'config', 'hosts');
    await fs.mkdir(hostsDir, { recursive: true });

    // Clear existing host configs
    const existingFiles = await fs.readdir(hostsDir);
    await Promise.all(
      existingFiles.map(file => 
        fs.unlink(path.join(hostsDir, file))
      )
    );

    // Write new host configs
    await Promise.all(
      config.hosts.map(host =>
        fs.writeFile(
          this.getHostConfigPath(host.id),
          this.generateHostConfig(host)
        )
      )
    );

    // Generate and save Caddyfile
    await fs.writeFile(
      this.getCaddyfilePath(),
      this.generateCaddyfile(config)
    );
  }
}

// Helper function to validate host configuration
export function validateHostConfig(host: CaddyHost): string[] {
  const errors: string[] = [];
  
  if (!host.domain) {
    errors.push('Domain is required');
  }
  
  if (!host.targetHost) {
    errors.push('Target host is required');
  }
  
  if (!host.targetPort || host.targetPort < 1 || host.targetPort > 65535) {
    errors.push('Invalid target port');
  }
  
  return errors;
}

================
File: src/lib/caddy/manager.ts
================
import { spawn, ChildProcess, execSync } from 'child_process';
import { promises as fs } from 'fs';
import path from 'path';
import { CaddyStatus, CaddyError } from './types';
import { CaddyConfigGenerator } from './config';

export class CaddyManager {
  private static instance: CaddyManager;
  private process: ChildProcess | null = null;
  private startTime: Date | null = null;
  private reloadRetryCount: number = 0;
  private maxReloadRetries: number = 3;

  private constructor() {}

  public static getInstance(): CaddyManager {
    if (!CaddyManager.instance) {
      CaddyManager.instance = new CaddyManager();
    }
    return CaddyManager.instance;
  }

  private async ensureDirectories(): Promise<void> {
    const dirs = [
      path.join(process.cwd(), 'config'),
      path.join(process.cwd(), 'config/hosts'),
      path.join(process.cwd(), 'config/ssl')
    ];

    for (const dir of dirs) {
      await fs.mkdir(dir, { recursive: true });
    }
  }

  private async waitForAdminAPI(): Promise<boolean> {
    const maxAttempts = 5;
    const delayMs = 1000;

    for (let i = 0; i < maxAttempts; i++) {
      try {
        const response = await fetch('http://0.0.0.0:2019/config/');
        if (response.ok) {
          return true;
        }
      } catch (err) {
        console.log(`Waiting for Caddy admin API (attempt ${i + 1}/${maxAttempts})...`);
      }
      await new Promise(resolve => setTimeout(resolve, delayMs));
    }
    return false;
  }

  public async start(): Promise<void> {
    if (this.process) {
      throw new CaddyError('Caddy is already running', 'ALREADY_RUNNING');
    }

    await this.ensureDirectories();

    try {
      // In containerized environment, Caddy is guaranteed to be installed
      execSync('caddy version', { stdio: 'ignore' });
    } catch {
      console.warn('Caddy version check failed, but continuing as we might be in a container');
    }

    const caddyfilePath = CaddyConfigGenerator.getCaddyfilePath();
    
    // Ensure Caddyfile exists
    if (!await fs.access(caddyfilePath).then(() => true).catch(() => false)) {
      // Create default Caddyfile if it doesn't exist
      await fs.writeFile(caddyfilePath, CaddyConfigGenerator.generateCaddyfile({
        hosts: [],
        globalSettings: { logLevel: 'INFO' }
      }));
    }

    this.process = spawn('caddy', ['run', '--config', caddyfilePath], {
      stdio: ['ignore', 'pipe', 'pipe']
    });

    this.startTime = new Date();

    // Handle process events
    this.process.on('error', (error) => {
      console.error('Caddy process error:', error);
      this.process = null;
      this.startTime = null;
    });

    this.process.on('exit', (code) => {
      console.log(`Caddy process exited with code ${code}`);
      this.process = null;
      this.startTime = null;
    });

    // Log stdout and stderr
    this.process.stdout?.on('data', (data) => {
      console.log('[Caddy]', data.toString());
    });

    this.process.stderr?.on('data', (data) => {
      console.error('[Caddy Error]', data.toString());
    });

    // Wait for admin API to be available
    const apiAvailable = await this.waitForAdminAPI();
    if (!apiAvailable) {
      throw new CaddyError('Caddy admin API not available after timeout', 'START_FAILED');
    }

    if (!this.process) {
      throw new CaddyError('Failed to start Caddy process', 'START_FAILED');
    }
  }

  public async stop(): Promise<void> {
    if (!this.process) {
      return;
    }

    this.process.kill();
    await new Promise<void>((resolve) => {
      const checkInterval = setInterval(() => {
        if (!this.process) {
          clearInterval(checkInterval);
          resolve();
        }
      }, 100);
    });
  }

  private async reloadWithRetry(caddyfileContent: string): Promise<void> {
    const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));
    
    for (let attempt = 1; attempt <= this.maxReloadRetries; attempt++) {
      try {
        const response = await fetch('http://0.0.0.0:2019/load', {
          method: 'POST',
          headers: {
            'Content-Type': 'text/caddyfile',
          },
          body: caddyfileContent,
        });

        if (!response.ok) {
          const errorText = await response.text();
          throw new Error(`Failed to reload Caddy: ${response.statusText} - ${errorText}`);
        }

        // Reset retry count on success
        this.reloadRetryCount = 0;
        return;
      } catch (err) {
        console.error(`Reload attempt ${attempt} failed:`, err);
        
        if (attempt === this.maxReloadRetries) {
          throw new CaddyError('Failed to reload Caddy configuration after multiple attempts', 'RELOAD_FAILED');
        }
        
        // Wait before retrying with exponential backoff
        await delay(Math.min(1000 * Math.pow(2, attempt - 1), 5000));
      }
    }
  }

  public async reload(): Promise<void> {
    try {
      // Read the current Caddyfile content
      const caddyfilePath = CaddyConfigGenerator.getCaddyfilePath();
      const caddyfileContent = await fs.readFile(caddyfilePath, 'utf-8');

      // Validate config before attempting reload
      if (!await this.validateConfig()) {
        throw new Error('Invalid Caddy configuration');
      }

      // Attempt reload with retry logic
      await this.reloadWithRetry(caddyfileContent);
    } catch (err) {
      console.error('Failed to reload Caddy:', err);
      throw new CaddyError('Failed to reload Caddy configuration', 'RELOAD_FAILED');
    }
  }

  public async getStatus(): Promise<CaddyStatus> {
    let version: string | undefined;
    try {
      version = execSync('caddy version').toString().trim();
    } catch (err) {
      console.error('Failed to get Caddy version:', err);
    }

    return {
      running: true, // In containerized environment, Caddy is always running
      configFile: CaddyConfigGenerator.getCaddyfilePath(),
      version
    };
  }

  public async validateConfig(): Promise<boolean> {
    try {
      execSync('caddy validate --config ' + CaddyConfigGenerator.getCaddyfilePath());
      return true;
    } catch (err) {
      console.error('Config validation failed:', err);
      return false;
    }
  }
}

// Export a singleton instance
export const caddyManager = CaddyManager.getInstance();

================
File: src/lib/caddy/types.ts
================
export interface CaddyHost {
  id: string;
  domain: string;
  targetHost: string;
  targetPort: number;
  ssl: boolean;
  forceSSL: boolean;
  enabled: boolean;
  createdAt: Date;
  updatedAt: Date;
}

export interface SSLCertificate {
  id: string;
  domain: string;
  issuer: string;
  validFrom: Date;
  validTo: Date;
  autoRenew: boolean;
}

export interface CaddyConfig {
  hosts: CaddyHost[];
  globalSettings: {
    defaultSNIHost?: string;
    logLevel?: 'DEBUG' | 'INFO' | 'WARN' | 'ERROR';
  };
}

// Error types for better error handling
export class CaddyError extends Error {
  constructor(message: string, public code: string) {
    super(message);
    this.name = 'CaddyError';
  }
}

export type CaddyStatus = {
  running: boolean;
  pid?: number;
  uptime?: number;
  configFile: string;
  version?: string;
};

================
File: src/lib/config/watcher.ts
================
import chokidar from 'chokidar';
import path from 'path';
import { caddyManager } from '../caddy/manager';
import debounce from 'lodash/debounce';

export class ConfigWatcher {
  private static instance: ConfigWatcher;
  private watcher: chokidar.FSWatcher | null = null;

  private constructor() {}

  public static getInstance(): ConfigWatcher {
    if (!ConfigWatcher.instance) {
      ConfigWatcher.instance = new ConfigWatcher();
    }
    return ConfigWatcher.instance;
  }

  private handleConfigChange = debounce(async () => {
    console.log('Configuration change detected, validating...');
    
    try {
      const isValid = await caddyManager.validateConfig();
      if (isValid) {
        console.log('Configuration is valid, reloading Caddy...');
        await caddyManager.reload();
        console.log('Caddy reloaded successfully');
      } else {
        console.error('Invalid configuration detected, skipping reload');
      }
    } catch (err) {
      console.error('Error handling configuration change:', err);
    }
  }, 1000);

  public async start(): Promise<void> {
    if (this.watcher) {
      return;
    }

    const configDir = path.join(process.cwd(), 'config');
    
    this.watcher = chokidar.watch([
      path.join(configDir, 'Caddyfile'),
      path.join(configDir, 'hosts', '*.conf')
    ], {
      persistent: true,
      ignoreInitial: true,
      awaitWriteFinish: {
        stabilityThreshold: 500,
        pollInterval: 100
      }
    });

    this.watcher
      .on('add', this.handleConfigChange)
      .on('change', this.handleConfigChange)
      .on('unlink', this.handleConfigChange)
      .on('error', (error) => {
        console.error('Config watcher error:', error);
      });

    console.log('Config watcher started');
  }

  public async stop(): Promise<void> {
    if (this.watcher) {
      await this.watcher.close();
      this.watcher = null;
      console.log('Config watcher stopped');
    }
  }
}

// Export a singleton instance
export const configWatcher = ConfigWatcher.getInstance();

================
File: src/lib/hooks/useApi.ts
================
import { useToast } from "../../app/components/ui/use-toast"
import { formatError } from "../utils"

interface ApiOptions {
  showSuccessToast?: boolean
  successMessage?: string
}

// Use a more specific type that still allows for flexible object structures
type RequestData = Record<string, unknown> | Array<unknown>

export function useApi() {
  const { toast } = useToast()

  const handleRequest = async <T>(
    requestFn: () => Promise<T>,
    options: ApiOptions = {}
  ): Promise<T | null> => {
    try {
      const result = await requestFn()
      
      if (options.showSuccessToast) {
        toast({
          title: "Success",
          description: options.successMessage || "Operation completed successfully",
        })
      }
      
      return result
    } catch (error) {
      console.error("API Error:", error)
      
      toast({
        variant: "destructive",
        title: "Error",
        description: formatError(error),
      })
      
      return null
    }
  }

  const handleResponse = async (response: Response) => {
    if (!response.ok) {
      const error = await response.json().catch(() => ({
        message: response.status === 404 
          ? 'Resource not found'
          : response.status === 401
          ? 'Unauthorized - Please log in again'
          : 'An error occurred while processing your request'
      }))
      throw new Error(error.message || `HTTP error! status: ${response.status}`)
    }
    return response.json()
  }

  // Default fetch options to include with all requests
  const defaultOptions = {
    credentials: 'include' as RequestCredentials,
    headers: {
      'Content-Type': 'application/json',
    }
  }

  const get = async <T>(url: string, options?: ApiOptions): Promise<T | null> => {
    return handleRequest(async () => {
      const response = await fetch(url, {
        ...defaultOptions,
        method: 'GET'
      })
      return handleResponse(response)
    }, options)
  }

  const post = async <T>(url: string, data: RequestData, options?: ApiOptions): Promise<T | null> => {
    return handleRequest(async () => {
      const response = await fetch(url, {
        ...defaultOptions,
        method: 'POST',
        body: JSON.stringify(data),
      })
      return handleResponse(response)
    }, options)
  }

  const put = async <T>(url: string, data: RequestData, options?: ApiOptions): Promise<T | null> => {
    return handleRequest(async () => {
      const response = await fetch(url, {
        ...defaultOptions,
        method: 'PUT',
        body: JSON.stringify(data),
      })
      return handleResponse(response)
    }, options)
  }

  const del = async <T>(url: string, options?: ApiOptions): Promise<T | null> => {
    return handleRequest(async () => {
      const response = await fetch(url, {
        ...defaultOptions,
        method: 'DELETE',
      })
      return handleResponse(response)
    }, options)
  }

  return {
    get,
    post,
    put,
    delete: del
  }
}

================
File: src/lib/hooks/useHosts.ts
================
import useSWR, { mutate } from 'swr'
import { useApi } from './useApi'
import { CaddyHost } from '../caddy/types'

const HOSTS_KEY = '/api/hosts'

export function useHosts() {
  const api = useApi()
  const { data: hosts, error, isLoading } = useSWR<CaddyHost[]>(
    HOSTS_KEY,
    async () => {
      const result = await api.get<CaddyHost[]>(HOSTS_KEY)
      return result || []
    }
  )

  const addHost = async (host: Omit<CaddyHost, 'id' | 'createdAt' | 'updatedAt'>) => {
    const result = await api.post<CaddyHost>(HOSTS_KEY, host as Record<string, unknown>, {
      showSuccessToast: true,
      successMessage: 'Host added successfully'
    })
    if (result) {
      await mutate(HOSTS_KEY)
    }
    return result
  }

  const updateHost = async (host: CaddyHost) => {
    const result = await api.put<CaddyHost>(
      `${HOSTS_KEY}/${host.id}`,
      host as unknown as Record<string, unknown>,
      {
        showSuccessToast: true,
        successMessage: 'Host updated successfully'
      }
    )
    if (result) {
      await mutate(HOSTS_KEY)
    }
    return result
  }

  const deleteHost = async (hostId: string) => {
    const result = await api.delete<{ success: boolean }>(
      `${HOSTS_KEY}/${hostId}`,
      {
        showSuccessToast: true,
        successMessage: 'Host deleted successfully'
      }
    )
    if (result) {
      await mutate(HOSTS_KEY)
    }
    return result
  }

  return {
    hosts: hosts || [],
    isLoading,
    error,
    addHost,
    updateHost,
    deleteHost,
    mutate: () => mutate(HOSTS_KEY)
  }
}

================
File: src/lib/hooks/useSSL.ts
================
import { useCallback, useEffect, useState } from 'react';
import { SSLCertificate } from '@/lib/caddy/types';
import { useApi } from './useApi';
import { useToast } from '@/app/components/ui/use-toast';

export function useSSL() {
  const [certificates, setCertificates] = useState<SSLCertificate[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<Error | null>(null);
  const { toast } = useToast();
  const api = useApi();

  const fetchCertificates = useCallback(async () => {
    try {
      console.log('Fetching SSL certificates...');
      const data = await api.get<SSLCertificate[]>('/api/ssl', {
        showSuccessToast: false
      });
      
      console.log('Received certificates:', data);
      
      // Only update certificates if we got valid data
      if (Array.isArray(data)) {
        setCertificates(data);
        setError(null);
      } else {
        console.error('Invalid certificates data received:', data);
        setCertificates([]);
        setError(new Error('Invalid response format'));
      }
    } catch (error) {
      console.error('Error fetching certificates:', error);
      setError(error instanceof Error ? error : new Error('Unknown error'));
      toast({
        title: 'Error',
        description: 'Failed to fetch SSL certificates.',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  }, [api, toast]);

  const createCertificate = useCallback(async (domain: string) => {
    try {
      console.log('Creating certificate for domain:', domain);
      const newCert = await api.post<SSLCertificate>('/api/ssl', { domain }, {
        showSuccessToast: true,
        successMessage: 'SSL certificate created successfully'
      });
      
      console.log('Created certificate:', newCert);
      
      if (newCert && newCert.id && newCert.domain) {
        setCertificates(prev => [...prev, newCert]);
        setError(null);
        return newCert;
      }
      throw new Error('Invalid certificate data received');
    } catch (error) {
      console.error('Error creating certificate:', error);
      setError(error instanceof Error ? error : new Error('Unknown error'));
      toast({
        title: 'Error',
        description: 'Failed to create SSL certificate. Please try again.',
        variant: 'destructive',
      });
      throw error;
    }
  }, [api, toast]);

  const deleteCertificate = useCallback(async (id: string) => {
    try {
      console.log('Deleting certificate:', id);
      const result = await api.delete<{ success: boolean }>(`/api/ssl?id=${id}`, {
        showSuccessToast: true,
        successMessage: 'SSL certificate deleted successfully'
      });
      
      console.log('Delete result:', result);
      
      if (result?.success) {
        setCertificates(prev => prev.filter(cert => cert.id !== id));
        setError(null);
      } else {
        throw new Error('Failed to delete certificate');
      }
    } catch (error) {
      console.error('Error deleting certificate:', error);
      setError(error instanceof Error ? error : new Error('Unknown error'));
      toast({
        title: 'Error',
        description: 'Failed to delete SSL certificate. Please try again.',
        variant: 'destructive',
      });
      throw error;
    }
  }, [api, toast]);

  // Initial fetch
  useEffect(() => {
    fetchCertificates();
  }, [fetchCertificates]);

  return {
    certificates,
    loading,
    error,
    createCertificate,
    deleteCertificate,
    refresh: fetchCertificates,
  };
}

================
File: src/lib/services/caddy-service.ts
================
import { caddyManager } from '../caddy/manager';
import { configWatcher } from '../config/watcher';
import { CaddyError } from '../caddy/types';

class CaddyService {
  private static instance: CaddyService;
  private isInitialized = false;

  private constructor() {}

  public static getInstance(): CaddyService {
    if (!CaddyService.instance) {
      CaddyService.instance = new CaddyService();
    }
    return CaddyService.instance;
  }

  public async initialize(): Promise<void> {
    if (this.isInitialized) {
      return;
    }

    try {
      console.log('Initializing Caddy service...');

      // Start Caddy process
      await caddyManager.start();
      console.log('Caddy process started');

      // Start config watcher
      await configWatcher.start();
      console.log('Config watcher started');

      this.isInitialized = true;
      console.log('Caddy service initialized successfully');
    } catch (error) {
      console.error('Failed to initialize Caddy service:', error);
      if (error instanceof CaddyError) {
        switch (error.code) {
          case 'NOT_INSTALLED':
            console.error('Please ensure Caddy is installed and available in PATH');
            break;
          case 'ALREADY_RUNNING':
            console.error('Another instance of Caddy is already running');
            break;
          default:
            console.error('An unexpected error occurred:', error.message);
        }
      }
      throw error;
    }
  }

  public async shutdown(): Promise<void> {
    if (!this.isInitialized) {
      return;
    }

    try {
      console.log('Shutting down Caddy service...');

      // Stop config watcher
      await configWatcher.stop();
      console.log('Config watcher stopped');

      // Stop Caddy process
      await caddyManager.stop();
      console.log('Caddy process stopped');

      this.isInitialized = false;
      console.log('Caddy service shut down successfully');
    } catch (error) {
      console.error('Failed to shut down Caddy service:', error);
      throw error;
    }
  }

  public async getStatus(): Promise<{
    initialized: boolean;
    caddyStatus: Awaited<ReturnType<typeof caddyManager.getStatus>>;
  }> {
    return {
      initialized: this.isInitialized,
      caddyStatus: await caddyManager.getStatus()
    };
  }
}

// Export singleton instance
export const caddyService = CaddyService.getInstance();

// Handle graceful shutdown
if (typeof process !== 'undefined') {
  process.on('SIGTERM', async () => {
    console.log('SIGTERM received, shutting down...');
    await caddyService.shutdown();
    process.exit(0);
  });

  process.on('SIGINT', async () => {
    console.log('SIGINT received, shutting down...');
    await caddyService.shutdown();
    process.exit(0);
  });
}

================
File: src/lib/utils.ts
================
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

export function formatError(error: unknown): string {
  if (error instanceof Error) {
    return error.message
  }
  if (typeof error === 'string') {
    return error
  }
  return 'An unknown error occurred'
}

export function isErrorWithMessage(error: unknown): error is { message: string } {
  return (
    typeof error === 'object' &&
    error !== null &&
    'message' in error &&
    typeof (error as { message: unknown }).message === 'string'
  )
}

// Helper to handle API responses
export async function handleApiResponse(response: Response) {
  if (!response.ok) {
    const error = await response.json().catch(() => ({
      message: 'An error occurred while processing your request'
    }))
    throw new Error(error.message || `HTTP error! status: ${response.status}`)
  }
  return response.json()
}

================
File: src/types/next-auth.d.ts
================
import "next-auth";

declare module "next-auth" {
  interface User {
    id: string;
    name: string;
    email: string;
  }

  interface Session {
    user: User;
  }
}

================
File: src/middleware.ts
================
import { withAuth } from "next-auth/middleware";

export default withAuth(
  {
    callbacks: {
      authorized: ({ token }) => !!token,
    },
    pages: {
      signIn: "/login",
    },
  }
);

// Protect all routes under /main and other authenticated routes
export const config = {
  matcher: [
    "/main/:path*",
    "/proxy_hosts/:path*",
    "/ssl_management/:path*",
    "/jobs_management/:path*",
  ],
};

================
File: .dockerignore
================
# Dependencies
node_modules
.pnp
.pnp.js

# Testing
coverage

# Next.js
.next
out

# Production
build

# Misc
.DS_Store
*.pem
.env*
!.env.example

# Debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# IDE
.idea
.vscode

# Git
.git
.gitignore

# Docker
Dockerfile
.dockerignore
docker-compose.yml

# Caddy runtime data
config/hosts/*
config/ssl/*
!config/hosts/.gitkeep
!config/ssl/.gitkeep

================
File: .eslintrc.json
================
{
  "extends": ["next/core-web-vitals"]
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: docker-compose.yml
================
services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"  # Next.js
      - "80:80"      # HTTP
      - "443:443"    # HTTPS
      - "2019:2019"  # Caddy admin API
    volumes:
      - ./config:/app/config
      - caddy_data:/data
      - caddy_config:/config
    environment:
      - NODE_ENV=production
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=your-secret-key # Change this in production
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

volumes:
  caddy_data:
    # Stores Caddy data including certificates
  caddy_config:
    # Stores Caddy configuration

================
File: docker-entrypoint.sh
================
#!/bin/sh
set -e

# Create necessary directories
mkdir -p /app/config/hosts /app/config/ssl

# Always ensure correct Caddyfile content
echo "{
    admin localhost:2019
    auto_https off
    persist_config off
    log {
        format json
        level INFO
    }
}

# Import all host configurations
import /app/config/hosts/*.conf" > /app/config/Caddyfile

# Start Next.js
node server.js &

# Wait a bit for Next.js to start
sleep 5

# Start Caddy
exec caddy run --config /app/config/Caddyfile

================
File: Dockerfile
================
FROM node:20-alpine AS builder

# Install dependencies for building
RUN apk add --no-cache libc6-compat

WORKDIR /app

# Copy package files
COPY package*.json ./

# First generate/update the package-lock.json
RUN npm install

# Then run ci for reproducible builds
RUN npm ci

# Copy source code and config files
COPY . .

# Build the application
RUN npm run build

# Production image
FROM node:20-alpine AS runner

# Install Caddy
RUN apk add --no-cache caddy

WORKDIR /app

# Create config directories
RUN mkdir -p config/hosts config/ssl

# Copy built application
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static
COPY --from=builder /app/public ./public
COPY --from=builder /app/config ./config

# Copy the entire .next directory to ensure all build outputs are included
COPY --from=builder /app/.next ./.next

# Copy package files including the lock file
COPY --from=builder /app/package*.json ./

# Copy config files needed for styling
COPY --from=builder /app/postcss.config.js ./
COPY --from=builder /app/tailwind.config.ts ./

# Copy entrypoint script
COPY docker-entrypoint.sh ./
RUN chmod +x docker-entrypoint.sh

# Install all dependencies for production
RUN npm install
RUN npm ci

EXPOSE 3000
EXPOSE 80
EXPOSE 443
EXPOSE 2019

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV NEXT_SHARP_PATH=/app/node_modules/sharp

ENTRYPOINT ["/app/docker-entrypoint.sh"]

================
File: next.config.js
================
/** @type {import('next').NextConfig} */
const nextConfig = {
  output: 'standalone', // Enable standalone output for Docker
  experimental: {
    serverActions: {
      allowedOrigins: ['localhost:3000']
    },
  },
  // Configure image optimization
  images: {
    unoptimized: true,
  },
  // Ensure we can access the app in Docker and process styles correctly
  webpack: (config) => {
    config.watchOptions = {
      poll: 1000,
      aggregateTimeout: 300,
    }
    return config
  },
  // Ensure CSS modules work in standalone mode
  transpilePackages: ['@/app'],
  poweredByHeader: false,
};

module.exports = nextConfig;

================
File: package.json
================
{
  "name": "caddy-next",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@radix-ui/react-alert-dialog": "^1.1.2",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-toast": "^1.2.2",
    "@radix-ui/react-tooltip": "^1.1.4",
    "@shadcn/ui": "^0.0.4",
    "@svgr/webpack": "^8.1.0",
    "@types/bcryptjs": "^2.4.6",
    "autoprefixer": "^10.4.17",
    "bcryptjs": "^2.4.3",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "geist": "^1.3.1",
    "lodash": "^4.17.21",
    "lucide-react": "^0.462.0",
    "next": "14.1.0",
    "next-auth": "^4.24.10",
    "next-themes": "^0.4.3",
    "postcss": "^8",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "swr": "^2.2.5",
    "tailwind-merge": "^2.5.5",
    "tailwindcss": "^3.4.1",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@types/lodash": "^4.14.202",
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "eslint": "^8",
    "eslint-config-next": "14.1.0",
    "typescript": "^5"
  },
  "resolutions": {
    "react": "18.2.0",
    "react-dom": "18.2.0"
  }
}

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: README.md
================
# Caddy Next

A modern web interface for managing Caddy reverse proxies.

## Features

- Manage Caddy reverse proxy configurations through a user-friendly interface
- Automatic HTTPS with Let's Encrypt
- Real-time configuration updates
- Host management with SSL options
- Containerized deployment with Docker

## Prerequisites

- Docker
- Docker Compose

## Getting Started

1. Clone the repository:
```bash
git clone <repository-url>
cd caddy-next
```

2. Create a `.env` file with the required environment variables:
```bash
NEXTAUTH_URL=http://localhost:3000
NEXTAUTH_SECRET=your-secret-key  # Change this in production
```

3. Build and start the application:
```bash
docker compose up -d --build
```

The application will be available at:
- Web Interface: http://localhost:3000
- Caddy Admin API: http://localhost:2019

## Configuration

### Directory Structure

```
caddy-next/
├── config/
│   ├── hosts/    # Host configurations
│   ├── ssl/      # SSL certificates
│   └── Caddyfile # Base Caddy configuration
├── src/          # Application source code
└── docker-compose.yml
```

### Volumes

The application uses Docker volumes to persist data:
- `caddy_data`: Stores Caddy data including certificates
- `caddy_config`: Stores Caddy configuration
- `./config`: Mounted from the host for easy access to configurations

## Development

To run the application in development mode:

1. Install dependencies:
```bash
npm install
```

2. Start the development server:
```bash
npm run dev
```

## Production Deployment

For production deployment:

1. Update environment variables in docker-compose.yml
2. Ensure proper domain configuration
3. Deploy using Docker Compose:
```bash
docker compose up -d
```

## Security Considerations

- Change the `NEXTAUTH_SECRET` in production
- Secure the Caddy admin API endpoint
- Use proper SSL certificates in production
- Follow security best practices for reverse proxy configurations

## License

[Your License]

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

export default {
  darkMode: ["class"],
  content: [
    "./src/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        background: "hsl(var(--background) / <alpha-value>)",
        foreground: "hsl(var(--foreground) / <alpha-value>)",
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
